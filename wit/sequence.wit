@since(version = 0.1.0)
interface sequence {
    @since(version = 0.1.0)
    use types.{sequence, box-error};
  
    /// Generates the next value of the specified sequence.
    ///
    /// This updates the state of the sequence.
    ///
    /// ### Parameters
    /// - `seq`: The target sequence object.
    ///
    /// ### Returns
    /// - The next value of the sequence as `s64`.
    ///
    /// ### Raises
    /// - `box-error
    @since(version = 0.1.0)
    next: func(seq: sequence) -> result<s64, box-error>;
  
    /// Returns the current value of the specified sequence.
    ///
    /// Unlike `next()`, this does **not** increment the sequence.
    /// Returns an error if the sequence was never accessed via `next()` or `set()`.
    ///
    /// ### Parameters
    /// - `seq`: The target sequence object.
    ///
    /// ### Returns
    /// - The current value of the sequence as `s64`.
    ///
    /// ### Raises
    /// - `box-error
    @since(version = 0.1.0)
    current: func(seq: sequence) -> result<s64, box-error>;
  
    /// Sets the sequence to a specific value.
    ///
    /// This function is useful when you want to jump to a specific number in the sequence.
    ///
    /// ### Parameters
    /// - `seq`: The target sequence object.
    /// - `value`: The new value to assign.
    ///
    /// ### Raises
    /// - `box-error``
    @since(version = 0.1.0)
    set: func(seq: sequence, value: s64) -> result<_, box-error>;
  
    /// Resets the sequence to its initial state.
    ///
    /// This call clears the current sequence value, effectively "forgetting" the state.
    /// After a reset, calling `current()` will return an error until `next()` or `set()` is called again.
    ///
    /// Internally, if no transaction is active, this function starts and commits one.
    ///
    /// ### Parameters
    /// - `seq`: The target sequence object.
    ///
    /// ### Raises
    /// - `box-error
    @since(version = 0.1.0)
    reset: func(seq: sequence) -> result<_, box-error>;
}
