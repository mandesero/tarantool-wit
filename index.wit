interface index {
        use types.{
                index,
                box-error,
                tuple-result,
                s64-result,
                iterator-type,
                key-part-def,
                key-part-def-list-result,
                update-op,
                bool-result,
                tuple-list-result,
                index-type,
                empty-result,
                iterator-result,
                index-stat-result,
                pairs-opts,
                select-opts,
                select-result,
        };

        len: func(index: index) -> s64-result;
        bsize: func(index: index) -> s64-result;
        random: func(index: index, rnd: u32) -> tuple-result;
        get: func(index: index, key: list<u8>) -> tuple-result;
        min: func(index: index, key: list<u8>) -> tuple-result;
        max: func(index: index, key: list<u8>) -> tuple-result;
        count: func(iter-type: iterator-type, key: list<u8>) -> s64-result;

        unique: func(index: index) -> bool-result;
        get-type: func(index: index) -> result<index-type, box-error>;
        parts: func(index: index) -> key-part-def-list-result;
        pairs: func(index: index, opts: pairs-opts) -> iterator-result;
        select: func(index: index, key: list<u8>, opts: select-opts) -> select-result;
        update: func(index: index, key: list<u8>, ops: list<update-op>) -> tuple-result;
        delete: func(index: index, key: list<u8>) -> tuple-result;
        alter: func(index: index, unique: bool, parts: list<key-part-def>) -> empty-result;
        drop: func(index: index) -> empty-result;
        rename: func(index: index, new-name: string) -> empty-result;
        stat: func(index: index) -> index-stat-result;
        compact: func(index: index) -> empty-result;
        tuple-pos: func(index: index, key: list<u8>) -> s64-result;
}