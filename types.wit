/**
 * Architecture Decision Record for the Tarantool WIT definitions.
 *
 * Aside from enums, we opted to express every Tarantool type as either
 * record, resource or type alias. Choice of an expressing entity for each
 * type might seem arbitrary, but they are all aligned with the following
 * ideas:
 *
 * Resource is an entity that lives outside of a WASM component. That means
 * its whole lifecycle is managed entirely by the embedder. These entities are
 * explicitly created and destroyed by the embedder on command from a WASM
 * component. Resource entities, unlike records, can have methods.
 *
 * We made a decision to use resource semantics only for the iterators. One
 * might argue that the same semantics should apply to the spaces, indexes and
 * other types, since they are all handled by Tarantool and not by a WASM
 * component. That is a valid point, but a key difference between a space and
 * an iterator in regard to the ownesrhip semantics is that space is
 * manipulated by a `space_id` and is owned by Tarantool, while an iterator
 * is owned by an application and is manipulated directly.
 *
 * Resource semantics also requires every resource to be freed after use,
 * which makes no sense for spaces or indexes, because we would have to free
 * a reference. Yet still, it makes perfect sense for iterators.
 *
 * Final thing for consideration is object notation and methods. That feature
 * off resources looks very appealing to use for other Tarantool types, but it
 * has a few downsides to it. Every resource must be stored within a resource
 * table on the embedder side, and removed from there after free. Some of
 * our target languages have a notion of destructor and some of them don't.
 * That, in turn, results in making the user responsible for freeing the
 * resources from the resource table which is inconvenient, makes no sense in
 * comparison to Lua and leads to memory leaks.
 *
 * With that in mind, the decision is to sacrifice methods in favor of
 * preserving the logic and memory safety.
 *
 * Finally, we have type aliases. These are chosen for types that are
 * represented on the WASM side as opaque references. Unlike in records,
 * there is no generally useful underlying primitive to extract (like
 * `index_id`, for example), so we just wrap this reference into a nicely
 * named type.
 */

interface types {
        record box-error {
                message: string,
                %type: string,
                code: u32,
        }

        record index {
                id: s32,
                space-id: s32,
                index-base: s32,
        }

        record key-part-def {
                field-no: u32,
                %flags: u32,
                field-type: string,
                collation: option<string>,
                path: option<string>,
        }

        record sequence {
                id: s32,
        }

        record session {
                id: s64,
        }

        record space {
                id: s32,
        }

        resource iterator {
                /*
                 * Resource constructor can't return a result type, so we opt
                 * to use a static function instead.
                 */
                new-iterator: static func(index: index, iterator-type: iterator-type, key: list<u8>) -> iterator-result;

                next: func() -> tuple-result;

                /*
                 * Free is implicitly added by the bindgen for every resource.
                 */
        }

        resource tuple-iterator {
                /*
                 * Resource constructor can't return a result type, so we opt
                 * to use a static function instead.
                 */
                new-tuple-iterator: static func(%tuple: %tuple) -> tuple-iterator-result;

                position: func() -> u32;

                rewind: func();

                seek: func(pos: u32) -> tuple-field-result;

                next: func() -> tuple-field-result;

                /*
                 * Free is implicitly added by the bindgen for every resource.
                 */
        }

        enum iterator-type {
                iter-eq,
                iter-req,
                iter-all,
                iter-lt,
                iter-le,
                iter-ge,
                iter-gt,
                iter-bits-all-set,
                iter-bits-any-set,
                iter-bits-all-not-set,
                iter-overlaps,
                iter-neighbor,
                iter-np,
                iter-pp,
                iterator-type-max,
        }

        enum log-level {
                s-fatal,
                s-syserror,
                s-error,
                s-crit,
                s-warn,
                s-info,
                s-verbose,
                s-debug,
                say-level-max,
        }

        enum tuple-field-type {
                any,
                unsigned,
                %string,
                number,
                double,
                integer,
                boolean,
                varbinary,
                scalar,
                decimal,
                uuid,
                datetime,
                interval,
                array,
                map,
                int8,
                uint8,
                int16,
                uint16,
                int32,
                uint32,
                int64,
                uint64,
                float32,
                float64,
                field-type-max,
        }

        enum txn-isolation-level {
                /** take isolation level from global default_isolation_level. */
                txn-isolation-default,
                /** allow to read committed, but not confirmed changes. */
                txn-isolation-read-committed,
                /** allow to read only confirmed changes. */
                txn-isolation-read-confirmed,
                /** determine isolation level automatically. */
                txn-isolation-best-effort,
                /** allow to read only the changes confirmed on any cluster node. */
                txn-isolation-linearizable,
                /** upper bound of valid values. */
                txn-isolation-level-max,
        }

        type key-def = u64;

        type %tuple = u64;

        type tuple-format = u64;

        type tuple-field = u64;


        /* Tuple iterator should be a resource. */

        /** Result types. */
        type buffer-result = result<list<u8>, box-error>;
        type empty-result = result<_, box-error>;
        type index-result = result<space, box-error>;
        type iterator-result = result<iterator, box-error>;
        type key-def-result = result<key-def, box-error>;
        type key-part-def-list-result = result<list<key-part-def>, box-error>;
        type s64-result = result<s64, box-error>;
        type space-result = result<space, box-error>;
        type tuple-field-result = result<tuple-field, box-error>;
        type tuple-format-result = result<tuple-format, box-error>;
        type tuple-iterator-result = result<tuple-iterator, box-error>;
        type tuple-result = result<%tuple, box-error>;
        type validate-key-result = result<tuple<bool, u32>, box-error>;
}
