@since(version = 0.1.0)
interface say {

    @since(version = 0.1.0)
    use types.{log-level};
  
    /// Logs a message with the given log level.
    ///
    /// This is the generic logging function. If you know the level at compile time,
    /// consider using a level-specific function like `say-info` or `say-error`.
    ///
    /// ### Parameters
    /// - `level`: A value from `log-level`, such as `s-info` or `s-error`.
    /// - `msg`: The message string to log.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say(LogLevel.S_WARN, "This is a warning message")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// say('s-warn', "This is a warning message");
    /// ```
    @since(version = 0.1.0)
    say: func(level: log-level, msg: string);
  
    /// Logs an error message.
    ///
    /// ### Parameters
    /// - `msg`: The error message to log.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say_error("Something went wrong")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// sayError("Something went wrong");
    /// ```
    @since(version = 0.1.0)
    say-error: func(msg: string);
  
    /// Logs a critical error message.
    ///
    /// ### Parameters
    /// - `msg`: The message to log.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say_crit("Unrecoverable condition encountered")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// sayCrit("Unrecoverable condition encountered");
    /// ```
    @since(version = 0.1.0)
    say-crit: func(msg: string);
  
    /// Logs a warning message.
    ///
    /// ### Parameters
    /// - `msg`: The message to log.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say_warn("This is just a warning")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// sayWarn("This is just a warning");
    /// ```
    @since(version = 0.1.0)
    say-warn: func(msg: string);
  
    /// Logs an informational message.
    ///
    /// ### Parameters
    /// - `msg`: The message to log.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say_info("Processing started")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// sayInfo("Processing started");
    /// ```
    @since(version = 0.1.0)
    say-info: func(msg: string);
  
    /// Logs a verbose message for detailed output.
    ///
    /// ### Parameters
    /// - `msg`: The verbose message.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say_verbose("Detailed output")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// sayVerbose("Detailed output");
    /// ```
    @since(version = 0.1.0)
    say-verbose: func(msg: string);
  
    /// Logs a debug message.
    ///
    /// ### Parameters
    /// - `msg`: The debug message.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say_debug("Debug info")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// sayDebug("Debug info");
    /// ```
    @since(version = 0.1.0)
    say-debug: func(msg: string);
  
    /// Logs a system-level error message (e.g. related to `errno`).
    ///
    /// Typically used for OS-level failures.
    ///
    /// ### Parameters
    /// - `msg`: The system error description.
    ///
    /// ### Examples
    ///
    /// **Python**
    /// ```
    /// say.say_syserror("Failed to open file")
    /// ```
    ///
    /// **JavaScript**
    /// ```
    /// saySyserror("Failed to open file");
    /// ```
    @since(version = 0.1.0)
    say-syserror: func(msg: string);
}
